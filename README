
Building
--------
"build.sh" shell script to build tests for

- Windows/cygwin QNX cross compiling environment:
  Compiling output directory is "bin/qnx/"

- Native Linux runtime:
  Compiling output directory is "bin/linux/"


Time measurement verification
-----------------------------
Run "sleeptest" to verify time measurement.
Default sleep test delay is 10 seconds.
Optional "-d" command line argument print more result decimals.

  sleeptest [-d] [seconds]

IMPORTANT !!!
Verify test's run with "time" command and manual stopwatch.

  time  sleeptest [-d] [seconds]

All three measurement results should be approximately same:
 - manual stopwatch measurement
 - both "sleeptest"'s printed measurements
   (Note: "Results:" printing is not in measured times)
 - "time" command's "real" wall clock time result


Running msgring test (QNX)
--------------------------
Start running "msgring" with command line parameters:

  msgring.bin -P 10 -N 10000

Where
  -P  is process count of ring length to throw hot potato message
  -N  is how many times message circulates in process ring

Increase "-N" value until manual stopwatch measured test runtime
from enter back to command prompt is about 10 to 30 seconds.

Verify results

   - with command  "time msgring -P 10 -N xxxx"
     "Test wall clock (real) time ss.ddd seconds"
     should be same as stopwatch time (note measurement accuracy)

   - "time" command's
     - "real" time result should equal with previous results
     - "user"+"system" times should be approximately 10% of "real" time

Note:
"time" command measure only one (starting) process CPU time usage,
which is "1 / (-P 10)" part of total CPU usage (in this case 1/10 == 10%)

Test run two times message passing test and print result(s) per one test at time.


"-s xx" command line option
------------------------
Command line option "-s xx" allocate "xx" kilo bytes memory for each running process.
Each process make "cache scrambling" read access to allocated memory during message pass
(MsgReceive,MsgReply,MemoryAccess,MsgSend).


"-F" and "-R" scheduling options
--------------------------------
Msgring test have two optional kernel scheduling method selection command line options

 -F  select SCHED_FIFO scheduling strategy
 -R  select SCHED_RR   scheduling strategy


 lmbench
 -------
 Most interesting "lmbench" test(s) are:
 - bw_mem
 - lat_ops
 - lat_syscall null

 ref:
 http://lmbench.sourceforge.net/man/index.html
 http://lmbench.sourceforge.net/man/bw_mem.8.html
 http://lmbench.sourceforge.net/man/lat_ops.8.html
 http://lmbench.sourceforge.net/man/lat_syscall.8.html


==============================================================================
Orginal "lmbench" README file:

README for lmbench 2alpha8 net release.

To run the benchmark, you should be able to say:

	cd src
	make results

If you want to see how you did compared to the other system results
included here, say

	make see

Be warned that many of these benchmarks are sensitive to other things
being run on the system, mainly from CPU cache and CPU cycle effects.
So make sure your screen saver is not running, etc.

It's a good idea to do several runs and compare the output like so

	make results
	make rerun
	make rerun
	make rerun
	cd Results && make LIST=<your OS>/*
